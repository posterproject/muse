{"version":3,"file":"index-BC9Crp14.js","sources":["../../node_modules/bezier-easing/src/index.js","../../src/main.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n","import bezier from 'bezier-easing';\n\ninterface Wave {\n    name: string;\n    currentValue: number;\n    targetValue: number;\n    points: number[];\n    color: string;\n}\n\nconst WAVE_NAMES = ['alpha', 'beta', 'delta', 'gamma', 'theta'];\nconst WAVE_COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEEAD'];\nconst ZOOM_COEFFICIENT = 200;\nconst NUM_POINTS = 100;\nconst TRANSITION_DURATION = 1000; // ms\n\nclass WaveVisualizer {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n    private waves: Wave[];\n    private lastUpdate: number;\n    private easing: (t: number) => number;\n\n    constructor() {\n        this.canvas = document.getElementById('waveCanvas') as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n        this.waves = this.initializeWaves();\n        this.lastUpdate = performance.now();\n        this.easing = bezier(0.25, 0.1, 0.25, 1); // Smooth easing function\n\n        this.resize();\n        window.addEventListener('resize', () => this.resize());\n        \n        // Start the animation loop\n        requestAnimationFrame(this.animate.bind(this));\n        \n        // Start updating values every second\n        setInterval(() => this.updateValues(), 1000);\n    }\n\n    private initializeWaves(): Wave[] {\n        return WAVE_NAMES.map((name, index) => ({\n            name,\n            currentValue: 0,\n            targetValue: 0,\n            points: new Array(NUM_POINTS).fill(0),\n            color: WAVE_COLORS[index]\n        }));\n    }\n\n    private resize() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n    }\n\n    private updateValues() {\n        this.waves.forEach(wave => {\n            wave.targetValue = Math.random();\n        });\n        this.lastUpdate = performance.now();\n    }\n\n    private updateWaves(timestamp: number) {\n        const elapsed = timestamp - this.lastUpdate;\n        const progress = Math.min(elapsed / TRANSITION_DURATION, 1);\n        const easedProgress = this.easing(progress);\n\n        this.waves.forEach(wave => {\n            wave.currentValue = wave.currentValue + (wave.targetValue - wave.currentValue) * easedProgress;\n            \n            // Shift points to the left\n            wave.points.shift();\n            wave.points.push(wave.currentValue * ZOOM_COEFFICIENT);\n        });\n    }\n\n    private drawWaves() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        const waveWidth = this.canvas.width / this.waves.length;\n        const centerY = this.canvas.height / 2;\n\n        this.waves.forEach((wave, index) => {\n            const startX = index * waveWidth;\n            const pointSpacing = waveWidth / (NUM_POINTS - 1);\n\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = wave.color;\n            this.ctx.lineWidth = 2;\n\n            wave.points.forEach((point, pointIndex) => {\n                const x = startX + pointIndex * pointSpacing;\n                const y = centerY - point;\n\n                if (pointIndex === 0) {\n                    this.ctx.moveTo(x, y);\n                } else {\n                    this.ctx.lineTo(x, y);\n                }\n            });\n\n            this.ctx.stroke();\n\n            // Draw wave name\n            this.ctx.fillStyle = wave.color;\n            this.ctx.font = '14px Arial';\n            this.ctx.fillText(wave.name, startX + 10, 20);\n        });\n    }\n\n    private animate(timestamp: number) {\n        this.updateWaves(timestamp);\n        this.drawWaves();\n        requestAnimationFrame(this.animate.bind(this));\n    }\n}\n\n// Initialize the visualizer when the page loads\nwindow.addEventListener('load', () => {\n    new WaveVisualizer();\n}); "],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","src","mY1","mY2","sampleValues","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","WAVE_NAMES","WAVE_COLORS","ZOOM_COEFFICIENT","NUM_POINTS","TRANSITION_DURATION","WaveVisualizer","__publicField","bezier","name","index","wave","timestamp","elapsed","progress","easedProgress","waveWidth","centerY","startX","pointSpacing","point","pointIndex","y"],"mappings":"q/BAOA,IAAIA,EAAoB,EACpBC,EAAmB,KACnBC,EAAwB,KACxBC,EAA6B,GAE7BC,EAAmB,GACnBC,EAAkB,GAAOD,EAAmB,GAE5CE,EAAwB,OAAO,cAAiB,WAEpD,SAASC,EAAGC,EAAKC,EAAK,CAAE,MAAO,GAAM,EAAMA,EAAM,EAAMD,CAAI,CAC3D,SAASE,EAAGF,EAAKC,EAAK,CAAE,MAAO,GAAMA,EAAM,EAAMD,CAAI,CACrD,SAASG,EAAGH,EAAU,CAAE,MAAO,GAAMA,CAAI,CAGzC,SAASI,EAAYC,EAAIL,EAAKC,EAAK,CAAE,QAASF,EAAEC,EAAKC,CAAG,EAAII,EAAKH,EAAEF,EAAKC,CAAG,GAAKI,EAAKF,EAAEH,CAAG,GAAKK,CAAG,CAGlG,SAASC,EAAUD,EAAIL,EAAKC,EAAK,CAAE,MAAO,GAAMF,EAAEC,EAAKC,CAAG,EAAII,EAAKA,EAAK,EAAMH,EAAEF,EAAKC,CAAG,EAAII,EAAKF,EAAEH,CAAG,CAAE,CAExG,SAASO,EAAiBC,EAAIC,EAAIC,EAAIC,EAAKC,EAAK,CAC9C,IAAIC,EAAUC,EAAUC,EAAI,EAC5B,GACED,EAAWL,GAAMC,EAAKD,GAAM,EAC5BI,EAAWT,EAAWU,EAAUH,EAAKC,CAAG,EAAIJ,EACxCK,EAAW,EACbH,EAAKI,EAELL,EAAKK,QAEA,KAAK,IAAID,CAAQ,EAAInB,GAAyB,EAAEqB,EAAIpB,GAC7D,OAAOmB,CACT,CAEA,SAASE,EAAsBR,EAAIS,EAASN,EAAKC,EAAK,CACrD,QAASG,EAAI,EAAGA,EAAIvB,EAAmB,EAAEuB,EAAG,CAC1C,IAAIG,EAAeZ,EAASW,EAASN,EAAKC,CAAG,EAC7C,GAAIM,IAAiB,EACnB,OAAOD,EAET,IAAIJ,EAAWT,EAAWa,EAASN,EAAKC,CAAG,EAAIJ,EAC/CS,GAAWJ,EAAWK,CACzB,CACC,OAAOD,CACR,CAEA,SAASE,EAAcC,EAAG,CACxB,OAAOA,CACT,CAEc,OAAAC,EAAG,SAAiBV,EAAKW,EAAKV,EAAKW,EAAK,CACpD,GAAI,EAAE,GAAKZ,GAAOA,GAAO,GAAK,GAAKC,GAAOA,GAAO,GAC/C,MAAM,IAAI,MAAM,yCAAyC,EAG3D,GAAID,IAAQW,GAAOV,IAAQW,EACzB,OAAOJ,EAKT,QADIK,EAAe1B,EAAwB,IAAI,aAAaF,CAAgB,EAAI,IAAI,MAAMA,CAAgB,EACjGmB,EAAI,EAAGA,EAAInB,EAAkB,EAAEmB,EACtCS,EAAaT,CAAC,EAAIX,EAAWW,EAAIlB,EAAiBc,EAAKC,CAAG,EAG5D,SAASa,EAAUjB,EAAI,CAKrB,QAJIkB,EAAgB,EAChBC,EAAgB,EAChBC,EAAahC,EAAmB,EAE7B+B,IAAkBC,GAAcJ,EAAaG,CAAa,GAAKnB,EAAI,EAAEmB,EAC1ED,GAAiB7B,EAEnB,EAAE8B,EAGF,IAAIE,GAAQrB,EAAKgB,EAAaG,CAAa,IAAMH,EAAaG,EAAgB,CAAC,EAAIH,EAAaG,CAAa,GACzGG,EAAYJ,EAAgBG,EAAOhC,EAEnCkC,EAAezB,EAASwB,EAAWnB,EAAKC,CAAG,EAC/C,OAAImB,GAAgBtC,EACXuB,EAAqBR,EAAIsB,EAAWnB,EAAKC,CAAG,EAC1CmB,IAAiB,EACnBD,EAEAvB,EAAgBC,EAAIkB,EAAeA,EAAgB7B,EAAiBc,EAAKC,CAAG,CAEzF,CAEE,OAAO,SAAuBQ,EAAG,CAE/B,OAAIA,IAAM,EACD,EAELA,IAAM,EACD,EAEFhB,EAAWqB,EAASL,CAAC,EAAGE,EAAKC,CAAG,CACxC,CACF,2BChGKS,EAAa,CAAC,QAAS,OAAQ,QAAS,QAAS,OAAO,EACxDC,EAAc,CAAC,UAAW,UAAW,UAAW,UAAW,SAAS,EACpEC,EAAmB,IACnBC,EAAa,IACbC,EAAsB,IAE5B,MAAMC,CAAe,CAOjB,aAAc,CANNC,EAAA,eACAA,EAAA,YACAA,EAAA,cACAA,EAAA,mBACAA,EAAA,eAGC,KAAA,OAAS,SAAS,eAAe,YAAY,EAClD,KAAK,IAAM,KAAK,OAAO,WAAW,IAAI,EACjC,KAAA,MAAQ,KAAK,gBAAgB,EAC7B,KAAA,WAAa,YAAY,IAAI,EAClC,KAAK,OAASC,EAAO,IAAM,GAAK,IAAM,CAAC,EAEvC,KAAK,OAAO,EACZ,OAAO,iBAAiB,SAAU,IAAM,KAAK,QAAQ,EAGrD,sBAAsB,KAAK,QAAQ,KAAK,IAAI,CAAC,EAG7C,YAAY,IAAM,KAAK,aAAa,EAAG,GAAI,CAAA,CAGvC,iBAA0B,CAC9B,OAAOP,EAAW,IAAI,CAACQ,EAAMC,KAAW,CACpC,KAAAD,EACA,aAAc,EACd,YAAa,EACb,OAAQ,IAAI,MAAML,CAAU,EAAE,KAAK,CAAC,EACpC,MAAOF,EAAYQ,CAAK,CAAA,EAC1B,CAAA,CAGE,QAAS,CACR,KAAA,OAAO,MAAQ,OAAO,WACtB,KAAA,OAAO,OAAS,OAAO,WAAA,CAGxB,cAAe,CACd,KAAA,MAAM,QAAgBC,GAAA,CAClBA,EAAA,YAAc,KAAK,OAAO,CAAA,CAClC,EACI,KAAA,WAAa,YAAY,IAAI,CAAA,CAG9B,YAAYC,EAAmB,CAC7B,MAAAC,EAAUD,EAAY,KAAK,WAC3BE,EAAW,KAAK,IAAID,EAAUR,EAAqB,CAAC,EACpDU,EAAgB,KAAK,OAAOD,CAAQ,EAErC,KAAA,MAAM,QAAgBH,GAAA,CACvBA,EAAK,aAAeA,EAAK,cAAgBA,EAAK,YAAcA,EAAK,cAAgBI,EAGjFJ,EAAK,OAAO,MAAM,EAClBA,EAAK,OAAO,KAAKA,EAAK,aAAeR,CAAgB,CAAA,CACxD,CAAA,CAGG,WAAY,CACX,KAAA,IAAI,UAAU,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAE9D,MAAMa,EAAY,KAAK,OAAO,MAAQ,KAAK,MAAM,OAC3CC,EAAU,KAAK,OAAO,OAAS,EAErC,KAAK,MAAM,QAAQ,CAACN,EAAMD,IAAU,CAChC,MAAMQ,EAASR,EAAQM,EACjBG,EAAeH,GAAaZ,EAAa,GAE/C,KAAK,IAAI,UAAU,EACd,KAAA,IAAI,YAAcO,EAAK,MAC5B,KAAK,IAAI,UAAY,EAErBA,EAAK,OAAO,QAAQ,CAACS,EAAOC,IAAe,CACjC,MAAAhC,EAAI6B,EAASG,EAAaF,EAC1BG,EAAIL,EAAUG,EAEhBC,IAAe,EACV,KAAA,IAAI,OAAOhC,EAAGiC,CAAC,EAEf,KAAA,IAAI,OAAOjC,EAAGiC,CAAC,CACxB,CACH,EAED,KAAK,IAAI,OAAO,EAGX,KAAA,IAAI,UAAYX,EAAK,MAC1B,KAAK,IAAI,KAAO,aAChB,KAAK,IAAI,SAASA,EAAK,KAAMO,EAAS,GAAI,EAAE,CAAA,CAC/C,CAAA,CAGG,QAAQN,EAAmB,CAC/B,KAAK,YAAYA,CAAS,EAC1B,KAAK,UAAU,EACf,sBAAsB,KAAK,QAAQ,KAAK,IAAI,CAAC,CAAA,CAErD,CAGA,OAAO,iBAAiB,OAAQ,IAAM,CAClC,IAAIN,CACR,CAAC","x_google_ignoreList":[0]}